/**
 * @title CustomFilterAdapter.java
 * @description TODO
 * @package lm.com.framework.druid
 * @author mrluo735
 * @since JDK1.7
 * @date 2016年12月14日下午5:34:35
 * @version v1.0
 */
package lm.com.framework.druid;

import java.io.InputStream;
import java.io.Reader;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.util.Calendar;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;

import com.alibaba.druid.filter.FilterAdapter;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.JdbcParameter;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import com.alibaba.druid.sql.SQLUtils;

import lm.com.framework.JavaUtil;
import lm.com.framework.RMDBUtil;
import lm.com.framework.ReflectUtil;

/**
 * 自定义FilterAdapter
 * <p>
 * 拦截sql
 * </p>
 * 
 * @author mrluo735
 *
 */
public class CustomFilterAdapter extends FilterAdapter implements InitializingBean {
	private static final Logger logger = LoggerFactory.getLogger(CustomFilterAdapter.class);

	// region connection_prepareStatement
	/**
	 * 重载+1 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql)
			throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql);
		return statement;
	}

	/**
	 * 重载+2 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
			int autoGeneratedKeys) throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
		return statement;
	}

	/**
	 * 重载+3 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
			int resultSetType, int resultSetConcurrency) throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, resultSetType,
				resultSetConcurrency);
		return statement;
	}

	/**
	 * 重载+4 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
			int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, resultSetType,
				resultSetConcurrency, resultSetHoldability);
		return statement;
	}

	/**
	 * 重载+5 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
			int[] columnIndexes) throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, columnIndexes);
		return statement;
	}

	/**
	 * 重载+6 connection_prepareStatement
	 */
	@Override
	public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
			String[] columnNames) throws SQLException {
		PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, columnNames);
		return statement;
	}
	// endregion

	/**
	 * 
	 */
	@Override
	public void preparedStatement_clearParameters(FilterChain chain, PreparedStatementProxy statement)
			throws SQLException {
		chain.preparedStatement_clearParameters(statement);
	}

	/**
	 * 
	 */
	@Override
	public boolean preparedStatement_execute(FilterChain chain, PreparedStatementProxy statement) throws SQLException {
		this.printLogger("preparedStatement_execute", statement);
		return chain.preparedStatement_execute(statement);
	}

	/**
	 * 
	 */
	@Override
	public ResultSetProxy preparedStatement_executeQuery(FilterChain chain, PreparedStatementProxy statement)
			throws SQLException {
		// ParameterMetaData parameterMetaData =
		// statement.getParameterMetaData();
		// int parameterCount = parameterMetaData.getParameterCount();
		this.printLogger("preparedStatement_executeQuery", statement);
		return super.preparedStatement_executeQuery(chain, statement);
	}

	/**
	 * 
	 */
	@Override
	public int preparedStatement_executeUpdate(FilterChain chain, PreparedStatementProxy statement)
			throws SQLException {
		this.printLogger("preparedStatement_executeUpdate", statement);
		return chain.preparedStatement_executeUpdate(statement);
	}

	/**
	 * 重载+1 statement_execute
	 */
	@Override
	public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
		this.printLogger("重载+1 statement_execute", statement);
		return super.statement_execute(chain, statement, sql);
	}

	/**
	 * 重载+2 statement_execute
	 */
	@Override
	public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, int autoGeneratedKeys)
			throws SQLException {
		this.printLogger("重载+2 statement_execute(autoGeneratedKeys)", statement);
		return super.statement_execute(chain, statement, sql, autoGeneratedKeys);
	}

	/**
	 * 重载+3 statement_execute
	 */
	@Override
	public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, int[] columnIndexes)
			throws SQLException {
		this.printLogger("重载+3 statement_execute(columnIndexes)", statement);
		return super.statement_execute(chain, statement, sql, columnIndexes);
	}

	/**
	 * 重载+4 statement_execute
	 */
	@Override
	public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql, String[] columnNames)
			throws SQLException {
		this.printLogger("重载+4 statement_execute(columnNames)", statement);
		return super.statement_execute(chain, statement, sql, columnNames);
	}

	/**
	 * statement_executeQuery
	 */
	@Override
	public ResultSetProxy statement_executeQuery(FilterChain chain, StatementProxy statement, String sql)
			throws SQLException {
		this.printLogger("statement_executeQuery", statement);
		return super.statement_executeQuery(chain, statement, sql);
	}

	/**
	 * 重载+1 statement_executeUpdate
	 */
	@Override
	public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
		this.printLogger("重载+1 statement_executeUpdate", statement);
		return super.statement_executeUpdate(chain, statement, sql);
	}

	/**
	 * 重载+2 statement_executeUpdate
	 */
	@Override
	public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, int autoGeneratedKeys)
			throws SQLException {
		this.printLogger("重载+2 statement_executeUpdate(autoGeneratedKeys)", statement);
		return super.statement_executeUpdate(chain, statement, sql, autoGeneratedKeys);
	}

	/**
	 * 重载+3 statement_executeUpdate
	 */
	@Override
	public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, int[] columnIndexes)
			throws SQLException {
		this.printLogger("重载+3 statement_executeUpdate(columnIndexes)", statement);
		return super.statement_executeUpdate(chain, statement, sql, columnIndexes);
	}

	/**
	 * 重载+4 statement_executeUpdate
	 */
	@Override
	public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql, String[] columnNames)
			throws SQLException {
		this.printLogger("重载+4 statement_executeUpdate(columnNames)", statement);
		return super.statement_executeUpdate(chain, statement, sql, columnNames);
	}

	// region 参数赋值
	@Override
	public void preparedStatement_setArray(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Array x) throws SQLException {
		chain.preparedStatement_setArray(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setAsciiStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x) throws SQLException {
		chain.preparedStatement_setAsciiStream(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setAsciiStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x, int length) throws SQLException {
		chain.preparedStatement_setAsciiStream(statement, parameterIndex, x, length);
	}

	@Override
	public void preparedStatement_setAsciiStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x, long length) throws SQLException {
		chain.preparedStatement_setAsciiStream(statement, parameterIndex, x, length);
	}

	@Override
	public void preparedStatement_setBigDecimal(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			BigDecimal x) throws SQLException {
		chain.preparedStatement_setBigDecimal(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setBinaryStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x) throws SQLException {
		chain.preparedStatement_setBinaryStream(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setBinaryStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x, int length) throws SQLException {
		chain.preparedStatement_setBinaryStream(statement, parameterIndex, x, length);
	}

	@Override
	public void preparedStatement_setBinaryStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x, long length) throws SQLException {
		chain.preparedStatement_setBinaryStream(statement, parameterIndex, x, length);
	}

	@Override
	public void preparedStatement_setBlob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Blob x) throws SQLException {
		chain.preparedStatement_setBlob(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setBlob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			InputStream inputStream) throws SQLException {
		chain.preparedStatement_setBlob(statement, parameterIndex, inputStream);
	}

	@Override
	public void preparedStatement_setBlob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			InputStream inputStream, long length) throws SQLException {
		chain.preparedStatement_setBlob(statement, parameterIndex, inputStream, length);
	}

	@Override
	public void preparedStatement_setBoolean(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			boolean x) throws SQLException {
		chain.preparedStatement_setBoolean(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setByte(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			byte x) throws SQLException {
		chain.preparedStatement_setByte(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setBytes(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			byte x[]) throws SQLException {
		chain.preparedStatement_setBytes(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setCharacterStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.Reader reader) throws SQLException {
		chain.preparedStatement_setCharacterStream(statement, parameterIndex, reader);
	}

	@Override
	public void preparedStatement_setCharacterStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.Reader reader, int length) throws SQLException {
		chain.preparedStatement_setCharacterStream(statement, parameterIndex, reader, length);
	}

	@Override
	public void preparedStatement_setCharacterStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.Reader reader, long length) throws SQLException {
		chain.preparedStatement_setCharacterStream(statement, parameterIndex, reader, length);
	}

	@Override
	public void preparedStatement_setClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Clob x) throws SQLException {
		chain.preparedStatement_setClob(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Reader reader) throws SQLException {
		chain.preparedStatement_setClob(statement, parameterIndex, reader);
	}

	@Override
	public void preparedStatement_setClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Reader reader, long length) throws SQLException {
		chain.preparedStatement_setClob(statement, parameterIndex, reader, length);
	}

	@Override
	public void preparedStatement_setDate(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Date x) throws SQLException {
		chain.preparedStatement_setDate(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setDate(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Date x, Calendar cal) throws SQLException {
		chain.preparedStatement_setDate(statement, parameterIndex, x, cal);
	}

	@Override
	public void preparedStatement_setDouble(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			double x) throws SQLException {
		chain.preparedStatement_setDouble(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setFloat(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			float x) throws SQLException {
		chain.preparedStatement_setFloat(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setInt(FilterChain chain, PreparedStatementProxy statement, int parameterIndex, int x)
			throws SQLException {
		chain.preparedStatement_setInt(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setLong(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			long x) throws SQLException {
		chain.preparedStatement_setLong(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setNCharacterStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, Reader value) throws SQLException {
		chain.preparedStatement_setNCharacterStream(statement, parameterIndex, value);
	}

	@Override
	public void preparedStatement_setNCharacterStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, Reader value, long length) throws SQLException {
		chain.preparedStatement_setNCharacterStream(statement, parameterIndex, value, length);
	}

	@Override
	public void preparedStatement_setNClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			NClob value) throws SQLException {
		chain.preparedStatement_setNClob(statement, parameterIndex, value);
	}

	@Override
	public void preparedStatement_setNClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Reader reader) throws SQLException {
		chain.preparedStatement_setNClob(statement, parameterIndex, reader);
	}

	@Override
	public void preparedStatement_setNClob(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Reader reader, long length) throws SQLException {
		chain.preparedStatement_setNClob(statement, parameterIndex, reader, length);
	}

	@Override
	public void preparedStatement_setNString(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			String value) throws SQLException {
		chain.preparedStatement_setNString(statement, parameterIndex, value);
	}

	@Override
	public void preparedStatement_setNull(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			int sqlType) throws SQLException {
		chain.preparedStatement_setNull(statement, parameterIndex, sqlType);
	}

	@Override
	public void preparedStatement_setNull(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			int sqlType, String typeName) throws SQLException {
		chain.preparedStatement_setNull(statement, parameterIndex, sqlType, typeName);
	}

	@Override
	public void preparedStatement_setObject(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Object x) throws SQLException {
		chain.preparedStatement_setObject(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setObject(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Object x, int targetSqlType) throws SQLException {
		chain.preparedStatement_setObject(statement, parameterIndex, x, targetSqlType);
	}

	@Override
	public void preparedStatement_setObject(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		chain.preparedStatement_setObject(statement, parameterIndex, x, targetSqlType, scaleOrLength);
	}

	@Override
	public void preparedStatement_setRef(FilterChain chain, PreparedStatementProxy statement, int parameterIndex, Ref x)
			throws SQLException {
		chain.preparedStatement_setRef(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setRowId(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			RowId x) throws SQLException {
		chain.preparedStatement_setRowId(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setShort(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			short x) throws SQLException {
		chain.preparedStatement_setShort(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setSQLXML(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			SQLXML xmlObject) throws SQLException {
		chain.preparedStatement_setSQLXML(statement, parameterIndex, xmlObject);
	}

	@Override
	public void preparedStatement_setString(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			String x) throws SQLException {
		chain.preparedStatement_setString(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setTime(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Time x) throws SQLException {
		chain.preparedStatement_setTime(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setTime(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Time x, Calendar cal) throws SQLException {
		chain.preparedStatement_setTime(statement, parameterIndex, x, cal);
	}

	@Override
	public void preparedStatement_setTimestamp(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Timestamp x) throws SQLException {
		chain.preparedStatement_setTimestamp(statement, parameterIndex, x);
	}

	@Override
	public void preparedStatement_setTimestamp(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.sql.Timestamp x, Calendar cal) throws SQLException {
		chain.preparedStatement_setTimestamp(statement, parameterIndex, x, cal);
	}

	@Override
	public void preparedStatement_setUnicodeStream(FilterChain chain, PreparedStatementProxy statement,
			int parameterIndex, java.io.InputStream x, int length) throws SQLException {
		chain.preparedStatement_setUnicodeStream(statement, parameterIndex, x, length);
	}

	@Override
	public void preparedStatement_setURL(FilterChain chain, PreparedStatementProxy statement, int parameterIndex,
			java.net.URL x) throws SQLException {
		chain.preparedStatement_setURL(statement, parameterIndex, x);
	}
	// endregion

	/**
	 * 
	 */
	@Override
	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub

	}

	/**
	 * 打印日志
	 * 
	 * @param statement
	 */
	private void printLogger(String methodName, StatementProxy statement) {
		String dialect = "mysql";
		try {
			String driverName = statement.getConnection().getMetaData().getDriverName();
			dialect = RMDBUtil.getRMDBType(driverName, "mysql").toLowerCase();
		} catch (Exception ex) {

		}
		String sql = statement.getBatchSql();
		int parameterSize = statement.getParametersSize();
		Map<Integer, JdbcParameter> parameterMap = statement.getParameters();

		StringBuilder sb = new StringBuilder();
		sb.append(String.format("%s 内容如下:", methodName)).append(JavaUtil.getLineSeparator());
		sb.append("原始sql语句=").append(SQLUtils.format(sql, dialect)).append(JavaUtil.getLineSeparator());
		sb.append(String.format("参数个数=%s, 参数列表如下:", parameterSize)).append(JavaUtil.getLineSeparator());
		for (int i = 0; i < parameterSize; i++) {
			JdbcParameter parameter = parameterMap.get(i);
			if (parameter == null)
				continue;

			// java.sql.Types;
			int sqlType = parameter.getSqlType();
			sb.append(String.format("索引%s	%s[%s](%s) = %s", i, this.getSqlTypeName(sqlType), sqlType,
					parameter.getLength(), parameter.getValue())).append(JavaUtil.getLineSeparator());
		}
		logger.info(sb.toString());
	}

	/**
	 * 获取sqlType的名称
	 * 
	 * @param sqlType
	 * @return
	 */
	private String getSqlTypeName(int sqlType) {
		String name = "";
		try {
			Constructor<java.sql.Types> constructor = java.sql.Types.class.getDeclaredConstructor();
			constructor.setAccessible(true);
			java.sql.Types instance = constructor.newInstance();
			Field[] fieldArray = ReflectUtil.getDeclaredFields(instance);
			for (Field item : fieldArray) {
				if (sqlType == item.getInt(instance)) {
					name = item.getName();
					break;
				}
			}
		} catch (Exception ex) {
		}
		return name;
	}
}
